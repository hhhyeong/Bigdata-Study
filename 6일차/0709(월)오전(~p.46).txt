<학습목표>
1. 대기오염API를 다룰 수 있다.
2. 데이터를 바라보는 관점의 차이. 여러가지 ML, DM, DL 를 사용해서 새로운 모델이나 가치를 창출할 수 있을까.
어떻게 모델에 학습하는 데 활용할 수 있는지.
데이터다루는법. 데이터에 접근하는 방법.


오늘은DB, 내일을ORM, 다음주는NoSQL, 그담날은JSON,XML, 그담날은갑자기 비정형데이터수집.

* 데이터관련 내용) 데이터모델링을 어떻게하고, 중복을 일어나지 않게하며, 데이터가 어떻게 유기적으로 연결될수 있는지.
 은 다루지 않겠습니다.


1. DBMS
- ERD와 DBMS를 통해서 어떻게 데이터를 저장하고 불러오는지.
- where, join을 이용해서 내 입맛에 맞게 조작할것임.
- sqlLite를가지고 파이썬에서 실습해볼것임.


비정형데이터 80%. DBMS에 올라간데이터는 20%.
- but, 비정형데이터는) 위험부담이 너무 큼. 실제 원하는 데이터를 뽑을수있을지, 가공할 수 있을지조차 확실하지 않음.
- 모델학습, 군집화.
- Structured Data 를 통해 은행.... 철저하게 검증하여 숫자데이터를 dBMS상에 돌리고있음. 그래야 오류가 안나고, 금전거래 시 충돌이 안나고. 정확한 숫자데이터를 다룰 수 있음. 스키마라는 구조 안에서.
- 요즘, 비정형데이터가 늘어나면서 80%의 시장을 개척할 수 있는 전문가가 될 것임.



DATA)
잔고, 계좌번호, 일반적인 raw data. 의미가 없는 있는 그대로의 데이터. 숫자만 놓고보면 알수가 없음.

정보)
한번 정제(처리)해서 의미를 가져온 게 information. context가 이씀.
ex) 지난달 구매실적이 얼마 이상이면 VIP고객이 되는것. 상황 정보를 끄집어 낼 수 있음.
정보를 만들어내는 과정에서. AI가 들어가기도함.
새로운 가치있는 정보를 data를 기반으로 컴퓨터가 스스로 발견하도록하여, 의미있는 모델/값을 도출하는것.

Database)
데이터를 저장/검색하는 걸 구조화된 방법으로 접근할 수 있도록 하는 시스템 비슷한 하나의 무형의 개체.??
정형화된 데이터(structured)라고 부름.
- 서로 연관되어있는 data들의 집합. 
- 무결성의 원칙(*****젤중요) 중복되지 않게하는게 기본. 테이블을 많이 쪼갬. 원하는 데이터 가져오기위해 많은테이블을 불러오기때문에 SQL이 길어짐.
- 데이터 통합, 무결성을 지켜가는 것이 DB에서 선행되어야 하는 중요한 조건.
- 메모리뿐만아니라, HDD나 다른 물리적 매체에 저장되어야 다음번에 재사용할 수 있음.
- 데이터를 공유하는 다른사람들과 이용할 수 있어야함.
- 특정 목적에 맞게 운영되어야 함.
=> 사용자마다 권한걸어놓고 누구는 select만가능하게, 권한을 막아두고 사용함. injection가지고 뚫리면 DB가 많이 날아가기때문.이런경우많이봄.




특징)
- 데이터에 실시간으로 접근할 수 있음.( 보통, 트랜잭션시간 2ms이내여야 함)
- ML할 땐 database쓰진않을것.반복적인작업할땐 쿼리문안쓸것임.
쿼리한번날리는데 1ms걸린다해도, 1000개를 만번학습시키면 개오래걸림.
저장할땐쓰는데 이용하는데는 특정목표에 맞는 트리구조나/파일형태로 만들어서 씀.
언어처리하는 데 범용DB(database)를 쓰진않음. 
-사용자(end-user)입장에서는 값을 통해 DB에 접근가능.


DBMS)
- 저장관리하는 역할.
- DB, table생성.
- D를 insert/select/delete/정렬/ 묶어서 report하는역할
- Oracle, mySQL, MsSQL 등
- SQLLite, mongoDB, PostGre, MariaDB 등 요즘 많이 씀.


DBMS의 역할과 장점(DB의 특징(무결성/동시사용가능)과 연관.)
- 충돌나는것을 DBMS가 알아서 회피해줌 -> 충돌나도 우리는 rollback하면되니까.
- update한다하더라도, 무결성원칙에 위배되면 실행되지않거나, error를 뱉어내줌.
- 무결성원칙을 유지할수있도록 스스로 관리해줌. 우리는 신경쓸게 없어줌.
- 개발시간단축.

- DB를 꺼내쓰는 개발자입장에서는 PK가 정해지지않으면 똑같은데이터 중 어떤것을 가져와야하는지, 어떤게 가장최근데이터인지, 알 길이 없음.
- 중간에 빵꾸난데이너, 타입이 다르거나... 이러면 안됨. 스키마 제작을 잘해야함.



DBMS의 종류)
- 계층형 모델.
	- 관계형DB모델. (RDBMS)
	- 하나의 개체. 실제 설계. Usecase전에하는단계. 사용자가 어떤걸할수있을지. Entity단위로 설계하고, 실제 테이블 만들고 하는 RDBMS.
		- 설계할 때의 ERD와 실제 테이블구조와 다른 경우가 많음.
		- RDBMS(테이블, 상위단의 모델구조.)과 다를수밖에 없음.
		=> 대안 : 객체관계모델. Object Oriented Model. class간의 상속관계. 
	-부모노드가 꼭 하나임.
	-단점) 부모를 여러개 가져야하는 경우.
	ex) 뉴스에 보면, 정치/사회/스포츠/경제 카테고리가 있음. 김연아가 금메달 딴것은 스포츠부분임. but, 김연아가 CF를 많이따서 기업들간의 관계에 변화가 생김. => 꼭 하나의 카테고리 잡을 수 없음 ->이래서 네트워크가 생김.
	ex) 책제목. 

-네트워크형 모델

-그래프형모델 : 어려움. 일반적으로 많이안씀. Semantic하는 사람들이 추론을 필요로할 경우 사용함.



객체관계모델)
ORM은 클래스와 RDB간의 관계를 이어주기때문에 굉장히 편함.
class 간에 상속관계포함되어있음.
attribute가 어떤 클래스와 연관되어있는지 명시되어있기때문에.
테이블 간 join없이도 표현가능함.




Reporting : FOrm형태도 제공함. mySQL써봤으면, 다른프로그램써서 테이블 구조, 데이터 저장되어있는 구조 다 볼 수 있을것임.
ex) PHPmyadmin. sql직접작성안해도 form형태로 data입력가능.
Editplus, 메모장. IDE너무 안맞음. 괄호 닫고싶지않은데 지가알아서 닫고. tab하기싫은데 지가알아서해주고.
우린 이런거 안쓸거임. cmd창에 일일히 다 쓸것임.

RDBMS Concepts.
-mySQL이랑 용어 썼ㄲ어씀.
-테이블 = Relation(관계라기보단, relation을 관리해주는 DBMS라는 의미.)
student라고 relationname이 붙은 "relation"인것임.
-튜플 = 한 줄의 row.
-열 = column = attribute.
-데이터의 수 row(세로방향)의 수 = 카디날리티.
-열(가로방향)의 수 = attribute의 수 = 디그리.
-컬럼들을 정의해놓은것 = 스키마.
- PK 기본키 : 수많은 후보키 중에, 절대 겹칠 일이 없는 속성. 이름은 분명히 동명이인이 있을 수 있음. PK없이 대체키찾고자한다면, join해야할 것임.
- FK 참조키

- RDB를가지고 해석할필요는 없을것. 우린이미 table에 익숙해져있기때문.!





개체관계모델(ERM)
-RDB설계하기위한 모델.
-이를 다이어그램으로 표현한거 : ER Diagram(ERD)
	ex) 교수-학생관계.
-개체(명사.실제존재하는 애.)와 관계(동사.엔티티끼리의 관계/갖는속성)의 구조를 모델을 가지고 그림으로 표현.
- 최소대응수(최소 cardinality)/ 최대대응수.
- 관계가 테이블이 될수도있는거고. 관계에 속성이 붙어버리니까, 어느쪽의 테이블에 존재해야하는데.. 암튼 설계할때는 ER으로
양쪽 다 속성이 붙을 수 있음.
학생이라는 entity에 붙은 atrribute인것.
각 튜플을 구분지을 수 있는 PK를 가질수있고, PK를 참조하는 FK. 후보키(Alternative Key)

네모 : 엔티티
동그라미 : atrribute.

relation에 attribute가 들어갈수도있음.
밑줄 : 수많은attribiye중의 기본키.


---------------------------------------2교시(#19~)------------------------------------
#20)
ER)
중복이 최소가 되어야한다는 관점에서 보면, 테이블3개가 나올 것.
(교수,지도,학생)
카디날리티 : 적어도 한명이상. n명까지. (1,n)이라고 표시.
부담임 포함하면 가르치는 교수가 2이상 일 수 있음. (1,n)가능.

A포함)
그림만보고 글자를 해석할 수 있어야함.
개체와의 관계, 카디날리티. 속성때문에 복잡한 그림이 완성됨~!

PK : 교수번호.
Student테이블의 PK, 교수테이블의 PK를 가지고 관계를 나타내는
지도테이블에는 학번, 교수번호를 모두 갖고 있을것임.


#23 좀더 쉬운예제)
엔티티 4개(Cupplier, City, Part, Sells)
각 테이블에 속성(attribute)이 붙음.
Supplir : sno, sname, cno(FK)
	= suplier, city의 관계가 만들어질것.
City(도시) : cno(PK), cname
Part(부품) : pno(PK), pname, price//실제로 현실세계에서는 소매점마다 똑같은 부품에 다른가격(price)을 붙이므로 Sells(판매점)에서 가격을 정하도록 Sells테이블의 속성으로 price를 지정함.
	= 어떤 supplier에서 얼만큼의 Part을 판매했는지.
Sells(판매량. 얼마나판매햇는지) : pno, sno


# 25~28)
CNO=1, CNMAE= London)
RDBMS관점에서보면 하나의튜플.
테이블관점에서보면 하나의row.


#28)
Row(1,2,8) (데이터)
테이블간의 관계를 가지고,
런던에 사는 Smith는 Nut를 8cents에 팔았다는 것을 알 수 있음(정보).
라는 정보를 끄집어낼수 있다는 것을 알 수 있음.


#30)
- DB언어.
각 DBMS의 특징에따라 SQL문은 대부분 비슷함.
보통, relationship만드는게 안됨. where조건을가지고 join해줘야함.
SQLlite는 relatinship만드는게 가능. join없이도 관계도출가능.


* DDL : Create, Drop, Alter, Truncate...

ER이중요한이유! : DB구조는 한번정하면 잘안바꿈. 데이터가 이미 들어가있으면 취소한다해도 공란(missing data)이 생겨버리므로 데이터무결성에 어긋남.
Alter로 데이터이름/속성의이름/데이터타입을 바꿔버리면 데이터 가져올 수도 없게됨.
Admin관련계쩡이 관리함.
한번생성하면 조작못하도록 막아버리는 경우도 많음.


* DML

Delete SQL injection을 당하는순간 다 날라가버릴수있음, 
본인은 batch로 어차피 이전데이터 가져올수있으니까,
insert만하는 위주.최종날짜만가지고 정렬해서 마지막날짜 가져오는 식으로 씀.

SQL종류에따라 권한부여에 주의해야한다는거.


* DCL
superuser(admin)가 권한부여하는 언어.
mySQL쓸땐 계정이 여러개기때문에 권한필요함.
SqlLite는 Embedded sql이므로 fileDB기때문에 나만씀. 권한필요없음.

#31)
update문에 set절과 where절이 있음.
where절에있는 술어의 조건에 해당하는 값을 변경해줌.

name값 중 'USA'에 해당하는 Population값을 1씩 증가.
데이터조작. DML

#32)
Boolean : 잘안씀. 언어에따라 False를 0이나 공란으로나올수도있음.
	 그냥 integer타입의 0로 입력함.
cahr : 고정형. char길이가 정해져있음. 폭이 고정되어있는경우 날짜저장할때 씀.
varchar : 가변형. 더 많이씀. 데이터의 용량을 조금이나마 줄이고플때 씀.

숫자관련(Decimal/ numeric)
정수형
가변형의 소수점
numeric : 가변형. 소수점포함.
일반적으로는 소수점이 필요할때는 float형쓰고, 더 정교하게 필요하면 double형 씀.
	=> byte수에 따라 골라쓰는데, 보통 일반적으로 쓰는걸 씀.
LOB : Large of Byte
CLOB : Char형. 파일에서 주고받는것보다 메모리에 올려놓고쓸수있기때문에 좀더 빠름. 
URL유출될수도 있어서. 
경로만알고잇으면 얼마든지 불펌(오른쪽마우스막혀잇고,...DB에 박아놓으면제일 확실함. 권한설정해놓은 사용자만 접근가능하도록.)이 가능함. 
장문의 데이터입력이 필요할때.
BLOB : 쉅에서 멀티미디어를 (이미지,동영상)다룰 일은 없을것.

#34)
[(lenght)] 디폴트값이있기때문에 옵션임. 써도되고 안써도되고. 디폴트값 1임
null과 space는 다름.
char(50)이라고하면 한글자만 써도 space로 나머지 칸수를 채움.
데이터를 줄이고싶으면 varchar를 쓰면됨.

char : 길이가 1개짜리 char를 담을수있음.
char(3) : 이 필드에는 길이 3개짜리만 담을수있음.
"Nothing is inserted due to error" : RDBMS가 데이터 무결성원칙에 의해 판단해서, 규약에 안맞으면 error를 뱉어서 값이 들어가지 않고 무결성 유지하도록 함.

옛날게임보면, 돈을 막 올렷다줄엿다 하면서 버그찾잖아요?
data overflow : 비트를넘어가는순간, 다음변수에 영향을 준다거나.
signed부호가 잇거나없거나,. 부호가 바뀌면 갑자기 max값을 찍는다던지.


Varchar : 입력된길이만큼만차지.


Integer
32bit컴퓨터에서의 integer 한글자(4byte)와 같음.
1word단위.

Big interger보다도 더 큰 숫자를 저장하고싶을때) char형으로 저장해서. 꺼낼때 integer로 바꿔서 쓸 수도 있음.

Smallint
여러가지 데이터타입이 필요한 이유 : 데이터타입에 따라 용도에 맞게 쓰기 위해. 메모리공간 효율을 위해. 요즘엔 컴퓨터 power이 너무좋아져서. 옛날엔 10000*10000짜리 배열은 컴터가 뻑났음ㅋ but, embedded programming할 땐 SqlLite는 안드로이드에 내장되어있어서 필요할수잇음.
뭐가 unpacking가능.?


Nmeric : float와 비슷. 쓸일없을거에용. Real이랑 Float를 쓸거거든요. 정교한 소숫점이 필요하지않을테니까. 3D하는사람들은 필요함. 수치해섣할때도필요할수잇음. but, 일반적으로는Float하나면 끝남.


GreenWatch 세계시계에 기반.
서버시간에 기반한.
	eX) 공연티케팅, interpark, 쇼핑몰이벤트 등등.

DATE
RDBMS설정에 따라 좀씩다름. date, time 타입을 지원안하는 언어도잇음. year,month등의 순서가 다를수도있음. 아예 char형으로 박아두는게 안정적일수있음



TIMESTAMP
RDBMS에 따라 지원유무/ 지원방식도 조금씩 다를수있음.
로그찍을때 많이씀. insert로 호출만하면 자동으로 날짜,시간이 찍힘.
로그분석굉장히 짜증남. 특정한시간의 데이터 불러오는게 짜증날수잇음.


CLOB
기본적으로 메모리가 큼.
Kilobyte. Megabyte 단위설정 가능
Wordpress, Blog쓸때, 데이터를 통째로 저장하도록만들때 씀.
but, escape문자를 해석할 여지가 있기때문에 BLOB로 지정하기도함.


#46)
Access는거의 쓸일없고.
MySQL은 boolean없나봄. Char로 대체하겟죵.
다 기억못해여. 쌩으로 처음찾는거랑, 한번알고잇다가 그때그때 찾는거랑은 다름.
한번 보세여.






















