#47)
프로시저 : 실제로 실무에서 많이 쓰임. 함수형태로 감싸서, 오류를 줄일 수 있음. db를 할사람은알아두면 좋음.
쓰면 그 DB에 종속되기때문에, 다른DB를 붙이는데 어려움이 있음.
SQL문은 DBMS에 따라 조금씩 다를 수 있음.
CREATE TABLE [테이블명] (
	[Column Definition]
);

PRIMARY KEY : 자동으로 Not Null. 중복불가. autoincrement.으로 설정됨.

#48)
Schema 구조 생성.
총 5개의 attribute를 갖는 relation을 만들게됨.

#49)
DROP


Truncate : 테이블 내의 데이터, 인덱스번호도 다지움. 다시 1번부터 시작함. 테스트로 dummy data 넣다가, 실제로 배포하기 전에 truncate로 날리는 용도.

Alter : 
ADD [Column definition] 
컬럼을 지우면 안의 데이터도 날아가버림.


애초에설계를 잘하고 잘만들어야지. 나중에 수정하는건 정말.안하는걸추천함~

ALTER TABLE [Table명]
[Parameter][Colume명][Data Type];




#52) INSERT
INSERT INTO [테이블명] ([컬럼명...])
VALUES ([VALUES쌍],,,);

PK의 컬럼명 제외하고 총 5개 컬럼명 입력, 컬럼명에 매핑되는 데이터 5개 VALUES로 적기.'

#54)
PK는 not null허용x.
기본값도 지정안해놔서 null이 되는것.
null과 0은 다른것!!  null은 아예 값이 없는것.


#55)
SELECT문은 join할때 겁나길어질수잇음.
취사선택하고싶을때.

SELECT [컬럼1], [컬럼2], ....			// column명은 ,로 seperate 가능함.
						// column명은 ,가 붙음.
FROM [테이블명];

테이블에서 특정 컬럼에 해당하는 값들을 가져오기.



#56)
GROUP By : 값이 여러개 있는 것을 하나로 묶어서 보여주는거.
ORDER BY : Uni code로 값을 저장하면, 시작하는 번호가 제일 앞쪽 문자가 되므로, 문자도 정렬 가능함.
컬럼명이 너무 길어서 다 쓰기 귀찮으니까 AS 쓰는거임.


#60)

<DB검색, Boolean검색>
실제 데이터가 있냐 없냐만 따짐. 
연관성이 있냐를 판단할수있는것도 아니고. Sorting을 할수있는것도 아님.

***** 구글검색같은거는 다음주에 배울거랭.(비정형데이터.?)

WHERE : 값이 들어감. 내용에 의한 참조. 주소나 경로가 들어가는 게 아님.
	=  : Equal. 값이 완벽하게 같아야 함.(LIKE와 구분.)
	<> : Not equal. MS제품에서 많이 봤을 것. 크지도않고, 작지도않은것.
	LIKE : 부분검색. %(아무거나 상관없다.)와 함께 쓰임. 게시판의 DB검색에 많이 쓰임.
	  %a : a로 끝나기만하면됨.
		  문자열 검색할 때 자주 씀. 특정단어가 들어가있는거 검색.
	  a_%_% : a로 시작하고 뒤에 3개이상의 글자가 나오는 애들 검색.
	  %or% : 앞이든 뒤에든 중간에든 or만 있으면 죄다 검색됨.
	  a%o : a로 시작하고 o로 끝나는 어떤애들이든 상관없음.
	IN : Python의 list에 특정값이 있는지 확인할 때쓰잖어. 똑같음.
		ex) IN ['', '', '', ...특정값들]안에 포함되어있는지.
	AND, OR : 논리연산자. 자주쓸것임. 조건 둘다만족하는 레코드 검색. 두 조건중 하나만 만족하는 레코드 검색.
	* : 아스터리스크. asterisk. 별표.


#61)
요새는 SQL Injection도 막아놔서 괜찮은데.
SQL Injecion도 주의해줘야함. 1=1 같은거.. 테이블도 훔쳐볼수있고.
다른DBMS에는 모든 사용자가 접근이 가능하면 insert, update ... 등을 통해, 쇼핑몰같은경우 회원정보 싹다빼오고, 데이터 다 삭제될 수도 있음..ㄷㄷ

#62)
Where 잘못해서 안쓰면 외주맡은 프리랜서같은경우는 위약금물고 물러나야함..
직장에서는 잘릴각오하고......ㄷㄷ

게임사이트에서 가끔 정기점검시간 하잖아.. bacsum난다고. 좀 전에께 불러와짐. 저장되었던 단위대로 불러오는것. 바로 전꺼가 불러와지는 게 아님. 그래서 좀전꺼는 다 날라가는거...ㄷㄷ

Modify, Update, Delete 할때는 Where절을 잘 써야함.
DB날리는거랑 마찬가지니까.
=> where절 없이 update절 쓰면, 테이블 전체의 해당컬럼 값 전체가 변하는거니까.
	=> 테이블의 해당컬럼 전체값이 변하게되는것.
	=> 슈퍼에서 가격을 미처 수정하지 못할때. where절을 했어도 먼가 조건이 안맞아서 미처 불러오지 못했거나.


DELETE는 데이터를 싹다 지우는것.
모든 값을 초기화시키는 Truncate와는 다름.
PK, Autoincrement 붙어있는 index는 남아있음.


****** 아마도 안쓰는게 나을것임. 문제가 생기느니 아예 안쓰는게 나음.
해경이 문제를 일으키면 해경을 없애면되고,
Syntax에러는 개발자가 고칠수있음.!
but, 대부분의 에러는 logical Error인데, 내가짠 코딩을 놓쳐서 꼬여버림...
내가 막짰는데 돌렸더니 돌아요~... 돌아요;;
나중에 무슨일이생길지 모름. 생겨도문제/안생겨도 문제. 특히 DB에서 다루는 문제일경우.
DB에서는 일반적으로 돈, 개인정보 등 중요한거 다루니까 문제 일으키는 delete같은애들은 차라리 안쓰는게나음.



#64)
JOIN 4개 + Cross Join(모든 가능한 쌍들을 다 만드는거.)
서로다른 두개의 테이블을 합치는 방법
설계 관점에서, 데이터가 중복이 되면 쪼개는 게 나음.
 => 하나의 view테이블을 만들거나, ..(또하나무엇)..?



Cross Join : 가능한 모든 쌍의 경우를 모두 나열하기떄문에 안좋은Join임.

Inner : 교집합. 양쪽 테이블에 다 있는 데이터를 가져오고 싶을 때.
Full Outer : 겹치면 합집합. 모두가져오고. 겹치는게없으면 Null.
Left/Right : 테이블1을기준으로, 테이블2를기주으로 하는거.



#67)
DBMS마다 다름.
MySQL에서는 references대신 FK라고 씀.
ORM에서는 표준 SQL문처럼 references라고 씀.

DepartmentID, LastName은 Null 허용.




ERD관점에서 보면. 
- Cross Join : 6*4 = 24쌍의 data가 생성됨.
	-> Where문으로 조건을 건다고 해도, 메모리관점상 좋지 못한 방법.
- Inner Join : 총 5쌍의 data가 생성됨.
- Left Outer Join : 총 6쌍의 data가 생성됨.
교집합이 기준이아니라, 왼쪽애가 기준. Employee는 살아남고, Department테이블 중 겹치는 애만 살아남음. Left Join에서는 왼쪽의 테이블의 값이 Null인애도 살아남음.
- Right Outer Join : 총 6쌍의 data가 생성됨.
 오른쪽 애가 기준. 왼쪽테이블의 ID가 Null값인애는 검색되지않고, 오른쪽 테이블의 ID값은 Null값인 애도 검색에 포함됨.
- Full Outer Join : 총 7쌍의 data가 생성됨.
합집합. 매칭안된레코드는 안된대로. 값이Null인애들도 살아남음.



JAVA에서 DB쓰려면 JDBC.
Oracle DB쓰려면 OJDBC?
Connector을다 붙여줘야함.
SQLite는 파일형태로 다 제공해주기때무넹. Connector가 필요없음.
DBMS 거쳐서 테이블형태로 불러올수잇기때문에.

DB중 하나만건드릴때. 
공동작업하는곳에 붙여버리면, 내꺼에도 영향이 오기때문에.
특히 임베디드할때. kable꼽아서 로그쭉뽑아보잖아여. 핸드폰. 등 

파일 하나당 DB하나.
파일하나만들면 DB하나만든거고. 그안에table이 여러개잇음.

입출력한 내가 나혼자 사용자임.
사용자가 여러명일필요x.

RDBMS의 거의 대부분의 기능제공함.
충돌방지, Python쓰면, 들어있어요!




sqlite3.version_info : 2.6.0
	version	     : 2.6.0		//module버전.
sqlite3.sqlite_version : 3.8.11		//run-time SQLite library

connector : 단순히 접속하는데
cursor : 실행해주는에. 쿼리를날리는애. 엔진에 가까움.

경로/이름써도 되고, 직접 메모리에 올려줘도 됨.
1)
2) 직접 메모리에 올리는 방법 : conn = sqlite3.connect(':memory:')


execute : 쿼리문을 실행시키는애.
fetch : 실행결과를 받아오는애.


<SQLite의 데이터형태>
다른DBMS로 포팅하려면 문제가 생길거임.
Integer도 하나.
Char도 TEXT로 CLOB과 유사하게 가변형인 문자 타입 하나밖에 없음.
BLOB : 이미지 넣을 수 있음. (경로만저장해둘필요없이?) byte형태로 저장해놨다가 꺼내다가 쓸때만 byte형태를 이미지/소리/동영상 파일로 읽기만하면됨.


하나의 transaction할때는 
select,update 전엔 commit 해야함. 앞에꺼가 반영안되어있으면 모든 작업에 적용안될수도있음.
but, commit 너무 많이하면 overflow가 발생할수있음..

commit하기 싫으면 select문을 수행하면 됨.
	=> select문을 실행하면, transaction을 자동으로 끝내주고 데이터 값을 가져옴.
 

쿼리 결과 가져올땐 cursor.
쿼리 수행할 땐 connector씀.


cursor : (==c언어에서 POINTER 개념.) 
데이터 튜플을 지정해서 FETCH로 가져올 때, CURSOR를 많이 씀.




#93)
DB에서도 try-catch문을 쓸수 있습니다.

#94)
Q. 뭐가 잘못되었을까요?
A. RDBMS에서 테이블 Create할 때, Primary Key를 만들지 않을 경우, 데이터무결성에 어긋나므로 테이블을 날려버릴 경우도 있다능.



#96)
실행 예)
Jupyter에서 Python을실행할 때, interpretor언어라서, 한 커널안에서 위에서부터 차례대로 실행되어 create문이 실행되었다가 아래쪽에서 에러가 나서 고쳐서 다시 실행할 시, 이미 create문은실행이 되었으므로 에러가 나는 것을 확인할 수 있음
=> 이럴 때, try-catch문을 사용할 수 있을거랭. 에러 발생 시 rollback되니까. 


#97)
with 시작 : cconn시작.
cur시작되면.
with 끝나면 : con.close()가 자동으로 불리는것과 같은 개념.


#98)
while True:
	if row == None:

// fetchall과 같은 느낌.

#99)
dictionary method override.
row_factory는 뭐지???


#100)
qmark 방식으로도 update문 작성할 수 있음.

#101)
