Heap Sort. vs. Quick Sort. vs. Binary Search

Heap
완전이진트리.
저장할땐, 배열의 1~N번쨰 인덱스까지 사용.(0사용x)
minHeap / maxHeap

시간복잡도 : nlogn(최악의경우없음. 왜냐면 이진완전트리기때문에.)
쓰임 : Priority queue (가자ㅓㅇ 효율적)


분할정복을 기반으로 하는 탐색법.
pivot설정. pivot을 기준으로 탐색.(대부분 가장오른쪽/ 가장왼쪽)
left : pivot보다 큰넘을 찾으면 멈춤.
right : pivot보다 작은넘을 찾으면 멈춤.

l<r 확인하고, 있다는걸 확인하면 l와 r을 swap.
최악의 경우 ; 기정렬되었을 경우 (n^2)


퀵소트의 최악의 경우를 극복하고자 나옴.
Median ofT hree.
기정렬된것도 빠르게할수있음.
(="중간값 퀵소트")라고 불림.
시간복잡도 : nlogN. 최악의 경우를 피할 수 있다.


머지소트 : nlogN? 퀵이랑 머지중에 뭐가더낫지?
힙이 더 나은것같댕.
중간값큅소트


이분탐색
 : 찾고자하는 키값을 mid로 두고, left 랑 right를 더해서 바능로 나눈 인덱스부터 찾음.
이미 정렬된 배열에서, 찾고자하는 키값이랑 중간값이랑 비교해서 크면오른쪽, 작으면왼쪽을 탐색함.
ex) 술게임 업앤다운!
***** upperbound, lower bound
upper bound : key값보다 큰값
lower bound : key값보
관련된 문제 : 보내주신댕.

블로그 "도랑도랑"



<<나왔던주제들!>>
+MST(최소신장트리)
+위상정렬(Topologt)

보안 IoT : SFTP 
SSH SHA 이런건..?

RB트리 : 짜는건 절대 안나옴. 짜는건 . mySQL에도 내장되어있대. OS관련된거아님?


<<Stack, Queue(원형,..등등, 수도코드)>>

